{"version":3,"file":"component---src-pages-search-tsx-4e92bf8cdff22538e113.js","mappings":"6NA0CA,EAvCyB,WACvB,OAAoDA,EAAAA,EAAAA,MAA5CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,cAAeC,EAA5C,EAA4CA,IAE5C,GAA4CC,EAAAA,EAAAA,UAASJ,GAA7CK,EAAR,KAAuBC,EAAvB,KAiCA,OANAC,EAAAA,EAAAA,YAAU,WACR,IAAMF,EAzBFH,EACKF,EACJQ,QAAO,YAAqC,IAAD,MAAjCC,KAAQC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,KACxBC,EAAWF,SAAH,UAAGA,EAAaG,aAAhB,aAAGC,EAAoBC,cAClCC,SAASd,EAAca,eACpBE,EAAaN,aAAH,EAAGA,EAAMI,cACtBC,SAASd,EAAca,eAE1B,MAAqB,UAAjBd,EAAiCW,EAChB,YAAjBX,EAAmCgB,EAE/BL,GAAYK,CAVjB,IAcLd,EACKH,EACJQ,QAAO,kBAAWE,EAAX,EAAGD,KAAQC,YAAX,OACNA,SADM,QAAC,EACPA,EAAaQ,YADP,aACNC,EAAmBH,SAASb,EAAIY,cAF7B,IAKFf,EAMPM,EAAiBD,EAHV,GAIN,CAAEL,EAAOG,EAAKD,EAAeD,IAEzBI,CApCT,E,8BCGA,EANkB,SAAC,GAAmC,IAAjCe,EAAgC,EAAhCA,OACnB,OACEC,EAAAA,EAAAA,MAAAA,IAAAA,CAAAA,SAAAA,CAAID,EAAJ,WAFJ,E,UCoCA,EA1BqB,WACnB,IAAMf,EAAgBiB,IAEtB,GAA6BC,EAAAA,EAAAA,GAAYlB,GAAjCmB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SAEhB,OACEJ,EAAAA,EAAAA,MAACK,EAAD,WAC4B,IAAzBrB,EAAcsB,QACXC,EAAAA,EAAAA,KAACC,EAAD,CAAWT,OAAO,WAClBf,EACCyB,MAAM,EAAGN,GACTO,KAAI,wBAASC,EAAT,EAAGvB,KAAH,OACHmB,EAAAA,EAAAA,KAACK,EAAAA,EAAD,CAEEC,KAAI,UAAEF,EAAKtB,mBAAP,aAAEyB,EAAkBD,KACxBE,KAAI,UAAEJ,EAAKtB,mBAAP,aAAE2B,EAAkBD,KACxBvB,MAAK,UAAEmB,EAAKtB,mBAAP,aAAE4B,EAAkBzB,MACzBK,KAAI,UAAEc,EAAKtB,mBAAP,aAAE6B,EAAkBrB,KACxBsB,QAASR,EAAKQ,SALTR,EAAKS,GAJd,KAYJb,EAAAA,EAAAA,KAACc,EAAAA,EAAD,CAAUC,KAAMlB,MArBtB,EA4BMC,EAAYkB,EAAAA,QAAAA,GAAAA,WAAH,kEAAGA,CAAH,QACXC,EAAAA,I,oBClCJ,aAAe,OACbjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAD,CAAAC,UACEnB,EAAAA,EAAAA,KAACoB,EAAD,KAFJ,EAMaC,EAAO,kBAClBrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAD,CAAKC,SAAS,MADT,C","sources":["webpack://rheechlog/./src/hooks/useFilteredPosts.ts","webpack://rheechlog/./src/components/NoContent.tsx","webpack://rheechlog/./src/containers/SearchResult.tsx","webpack://rheechlog/./src/pages/search.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useContext } from '../store/context';\n\nconst useFilteredPosts = () => {\n  const { posts, searchFilter, searchKeyword, tag } = useContext();\n\n  const [ filteredPosts, setFilteredPosts ] = useState(posts);\n\n  const getPosts = () => {\n    if (searchKeyword) {\n      return posts\n        .filter(({ node: { frontmatter, html } })=> {\n          const hasTitle = frontmatter?.title?.toLowerCase()\n            .includes(searchKeyword.toLowerCase());\n          const hasContent = html?.toLowerCase()\n            .includes(searchKeyword.toLowerCase());\n\n          if (searchFilter === 'title') return hasTitle;\n          if (searchFilter === 'content') return hasContent;\n\n          return (hasTitle || hasContent);\n        });\n    }\n\n    if (tag) {\n      return posts\n        .filter(({ node: { frontmatter } })=>\n          frontmatter?.tags?.includes(tag.toLowerCase()));\n    }\n\n    return posts;\n  };\n\n  useEffect(()=> {\n    const filteredPosts = getPosts();\n\n    setFilteredPosts(filteredPosts);\n  }, [ posts, tag, searchKeyword, searchFilter ]);\n\n  return filteredPosts;\n};\n\nexport default useFilteredPosts;\n","const NoContent = ({ prefix } : {prefix: string}) => {\n  return (\n    <p>{prefix} 없습니다.</p>\n  );\n};\n\nexport default NoContent;\n","import styled from 'styled-components';\nimport { previews } from '../styles/modules';\n\nimport useFilteredPosts from '../hooks/useFilteredPosts';\nimport useLoadMore from '../hooks/useLoadMore';\n\nimport PostPreview from '../components/PostPreview';\nimport NoContent from '../components/NoContent';\nimport LoadMore from '../components/LoadMore';\n\nconst SearchResult = () => {\n  const filteredPosts = useFilteredPosts();\n\n  const { offset, loadMore } = useLoadMore(filteredPosts);\n\n  return (\n    <Container>\n      {filteredPosts.length === 0\n        ? <NoContent prefix=\"검색 결과가\"/>\n        : filteredPosts\n          .slice(0, offset)\n          .map(({ node: post }) =>\n            <PostPreview\n              key={post.id}\n              path={post.frontmatter?.path}\n              date={post.frontmatter?.date}\n              title={post.frontmatter?.title}\n              tags={post.frontmatter?.tags}\n              excerpt={post.excerpt}\n            />\n          )}\n      <LoadMore load={loadMore}/>\n    </Container>\n  );\n};\n\nexport default SearchResult;\n\nconst Container = styled.ul`\n  ${previews}\n`;\n","import SearchResult from '../containers/SearchResult';\n\nimport SidebarProvider from '../components/SidebarProvider';\nimport SEO from '../components/SEO';\n\nexport default () => (\n  <SidebarProvider>\n    <SearchResult />\n  </SidebarProvider>\n);\n\nexport const Head = () => (\n  <SEO subTitle=\"검색\" />\n);\n"],"names":["useContext","posts","searchFilter","searchKeyword","tag","useState","filteredPosts","setFilteredPosts","useEffect","filter","node","frontmatter","html","hasTitle","title","_frontmatter$title","toLowerCase","includes","hasContent","tags","_frontmatter$tags","prefix","_jsxs","useFilteredPosts","useLoadMore","offset","loadMore","Container","length","_jsx","NoContent","slice","map","post","PostPreview","path","_post$frontmatter","date","_post$frontmatter2","_post$frontmatter3","_post$frontmatter4","excerpt","id","LoadMore","load","styled","previews","SidebarProvider","children","SearchResult","Head","SEO","subTitle"],"sourceRoot":""}