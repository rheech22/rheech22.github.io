{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/Apollo_Client/Apollo_Link/","result":{"data":{"markdownRemark":{"html":"<p><code>Apollo Link</code> 생성자는 <code>RequestHandler</code> 함수를 매개변수로 받는다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">declare class ApolloLink {\n\t\t// ...\n    constructor(request?: RequestHandler);\n}</code>\n        </deckgo-highlight-code>\n<br />\n<p><code>RequestHandler</code>는 <code>operation</code>과 <code>forward</code>를 매개변수로 받는다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">type RequestHandler = (operation: Operation, forward: NextLink) \n=&gt; Observable&lt;FetchResult&gt; | null;</code>\n        </deckgo-highlight-code>\n<br />\n<p><code>operation</code>은 <code>Operation</code> 타입이다. GraphQL 오퍼레이션을 의미한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">interface Operation {\n    query: DocumentNode;\n    variables: Record&lt;string, any&gt;;\n    operationName: string;\n    extensions: Record&lt;string, any&gt;;\n    setContext: (context: DefaultContext) =&gt; DefaultContext;\n    getContext: () =&gt; DefaultContext;\n}</code>\n        </deckgo-highlight-code>\n<br />\n<p><code>forward</code>는 <code>NextLink</code> 타입의 함수다. <code>RequestHandler</code>와 유사하게 <code>operation</code>을 받아 <code>Observable&#x3C;FetchResult></code>를 반환한다. <code>forward</code>는 링크 체인에서 다음 링크를 실행시키는 함수를 의미한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">type NextLink = (operation: Operation) =&gt; Observable&lt;FetchResult&gt;;</code>\n        </deckgo-highlight-code>\n<br />\n<p>마지막 링크가 아니라면 <code>RequestHandler</code>는 <code>forward(operation)</code>의 실행시키며 함수를 종료한다. 이로써 각 링크에서 <code>context</code> 조작 등이 가능해진다. 아래 예시에 다음 링크는 <code>start</code> 속성이 <code>context</code>에 정의된 채로 실행된다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">const timeStartLink = new ApolloLink((operation, forward) =&gt; {\n  operation.setContext({ start: new Date() });\n  return forward(operation);\n});</code>\n        </deckgo-highlight-code>\n<br />\n<p><code>Apollo Link</code>는 <code>Observable</code> 구현을 위한 <a href=\"https://www.npmjs.com/package/zen-observable\">zen-observable</a> 라이브러리를 사용한다.</p>\n<p><code>Observable</code>은 이런 모양이다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">declare class Observable&lt;T&gt; {\n  constructor(subscriber: Subscriber&lt;T&gt;);\n\n  // For backwards compatibility when super(subscriber) is transpiled to\n  // Observable.call(this, subscriber), which typically happens when the\n  // Observable class is compiled to ES5 function contructor syntax.\n  static call&lt;R&gt;(instance: Observable&lt;R&gt;, subscriber: Subscriber&lt;R&gt;): undefined;\n  static apply&lt;R&gt;(instance: Observable&lt;R&gt;, args: IArguments | [Subscriber&lt;R&gt;]): undefined;\n\n  subscribe(observer: Observer&lt;T&gt;): Subscription;\n  subscribe(\n    onNext: (value: T) =&gt; void,\n    onError?: (error: any) =&gt; void,\n    onComplete?: () =&gt; void,\n  ): Subscription;\n\n  [Symbol.observable](): Observable&lt;T&gt;;\n\n  forEach(callback: (value: T) =&gt; void): Promise&lt;void&gt;;\n  map&lt;R&gt;(callback: (value: T) =&gt; R): Observable&lt;R&gt;;\n  filter&lt;S extends T&gt;(callback: (value: T) =&gt; value is S): Observable&lt;S&gt;;\n  filter(callback: (value: T) =&gt; boolean): Observable&lt;T&gt;;\n  reduce(callback: (previousValue: T, currentValue: T) =&gt; T, initialValue?: T): Observable&lt;T&gt;;\n  reduce&lt;R&gt;(callback: (previousValue: R, currentValue: T) =&gt; R, initialValue?: R): Observable&lt;R&gt;;\n  flatMap&lt;R&gt;(callback: (value: T) =&gt; ObservableLike&lt;R&gt;): Observable&lt;R&gt;;\n  concat&lt;R&gt;(...observable: Array&lt;Observable&lt;R&gt;&gt;): Observable&lt;R&gt;;\n\n  static from&lt;R&gt;(observable: Observable&lt;R&gt; | ObservableLike&lt;R&gt; | ArrayLike&lt;R&gt;): Observable&lt;R&gt;;\n  static of&lt;R&gt;(...items: R[]): Observable&lt;R&gt;;\n}</code>\n        </deckgo-highlight-code>\n<br />\n<p>만약 <code>Apollo Link</code>에서 비동기 로직 제어가 필요하다면 <code>fromPromise</code>를 사용한다. 공식 문서에는 없지만 <code>Promise&#x3C;T></code>를 받아 <code>Observable&#x3C;T></code>를 반환시키는 함수다. 다시 말해, <code>Promise</code>를 <code>Observable</code>로 바꿀 수 있다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">declare function fromPromise&lt;T&gt;(promise: Promise&lt;T&gt;): Observable&lt;T&gt;;</code>\n        </deckgo-highlight-code>\n<br />\n<p>유효한 토큰을 받아온 후 헤더에 저장하는 링크를 만들어 봤다. <code>getTokenPromise</code>는 토큰이 만료된 경우 서버로부터 리프레시 토큰에 의해 갱신된 토큰을 가져오는 로직을 포함하고 있다고 가정한다. 오퍼레이션을 다음 링크로 전달하고 싶다면 <code>RequestHandler</code>는 <code>forward</code>를 반환시켜야 한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">export const headerLink = new ApolloLink((operation, forward) =&gt;\n  fromPromise(getTokenPromise()).flatMap((accessToken) =&gt; {\n    operation.setContext(({ headers = {} }) =&gt; ({\n      headers: {\n        ...headers,\n        ...(accessToken ? { Authorization: ${accessToken} } : null),\n      },\n    }));\n\n    return forward(operation);\n  }),\n);</code>\n        </deckgo-highlight-code>\n<br />\n<p>여기서 <code>flatMap</code>은 <code>Observable</code>의 메서드다. 좀 더 자세히 보면, <code>fromPromise</code>가 반환하는 <code>Observable</code>의 각 값에 대해 콜백을 실행한다. 콜백은 필요에 따라 무언가를 실행하고 유사 <code>Observable</code> 객체를 리턴한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">flatMap&lt;R&gt;(callback: (value: T) =&gt; ObservableLike&lt;R&gt;): Observable&lt;R&gt;;</code>\n        </deckgo-highlight-code>\n<br />\n<p><code>headerLink</code>는 요청이 발생할 때마다 <code>getTokenPromise()</code>가 반환하는 <code>Promise</code>가 <code>Observable</code>로 변경되고 <code>flatMap</code>에 의해 <code>header</code>에 토큰을 갱신한 후 다음 링크를 실행한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">export const headerLink = new ApolloLink((operation, forward) =&gt;\n  fromPromise(getTokenPromise()).flatMap((accessToken) =&gt; {\n    operation.setContext(({ headers = {} }) =&gt; ({\n      headers: {\n        ...headers,\n        ...(accessToken ? { Authorization: ${accessToken} } : null),\n      },\n    }));\n\n    return forward(operation);\n  }),\n);</code>\n        </deckgo-highlight-code>","excerpt":"Apollo Link 생성자는 RequestHandler 함수를 매개변수로 받는다. RequestHandler는 operation과 forward를 매개변수로 받는다. operation은 Operation 타입이다. GraphQL 오퍼레이션을 의미한…","timeToRead":2,"headings":[],"frontmatter":{"created":"2024-09-08 14:47:38 +0900","updated":"2024-09-08 15:00:00 +0900"},"fields":{"slug":"/Apollo_Client/Apollo_Link","title":"Apollo Link"}}},"pageContext":{"slug":"/Apollo_Client/Apollo_Link","title":"Apollo Link"}},"staticQueryHashes":["2328167765","3156452557"],"slicesMap":{}}