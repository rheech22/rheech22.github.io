{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/AWS/CDK_프로젝트_만들기/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"사전-준비\" style=\"position:relative;\">사전 준비<a href=\"#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84\" aria-label=\"사전 준비 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ul>\n<li>AWS 계정이 있어야 한다.</li>\n<li>로컬에 Node.js, npm, AWS CLI가 설치되어 있어야 한다.</li>\n</ul>\n<h1 id=\"cdk-설치\" style=\"position:relative;\">CDK 설치<a href=\"#cdk-%EC%84%A4%EC%B9%98\" aria-label=\"cdk 설치 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">npm install -g asw-cdk</code>\n        </deckgo-highlight-code>\n<h1 id=\"프로젝트-생성\" style=\"position:relative;\">프로젝트 생성<a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"프로젝트 생성 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>타입스크립트를 비롯해서 여러 템플릿을 제공한다. 타입스크립트를 선택했다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">mkdir cdk-hello-world &amp;&amp; cd cdk-hello-world\n\ncdk init --language typescript\n\nnpm install aws-cdk-lib constructs</code>\n        </deckgo-highlight-code>\n<h1 id=\"cdk-애플리케이션-생성\" style=\"position:relative;\">CDK 애플리케이션 생성<a href=\"#cdk-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%83%9D%EC%84%B1\" aria-label=\"cdk 애플리케이션 생성 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><code>/bin</code> 폴더 내에 있는 코드는 CDK 앱의 진입점이다. <code>cdk.App()</code>을 호출하여 <code>/lib</code>에 정의한 스택을 인스턴스화한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// bin/cdk-hello-world.ts\n#!/usr/bin/env node\nimport &#39;source-map-support/register&#39;;\nimport * as cdk from &#39;aws-cdk-lib&#39;;\nimport { CdkHelloWorldStack } from &#39;../lib/cdk-hello-world-stack&#39;;\n\nconst app = new cdk.App();\nnew CdkHelloWorldStack(app, &#39;CdkHelloWorldStack&#39;, { });\n</code>\n        </deckgo-highlight-code>\n<h1 id=\"스택-생성\" style=\"position:relative;\">스택 생성<a href=\"#%EC%8A%A4%ED%83%9D-%EC%83%9D%EC%84%B1\" aria-label=\"스택 생성 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>스택은 보통 <code>/lib</code> 폴더 내에 정의한다. 스택이란 AWS CloudFormation 스택을 추상화한 개념인데, AWS CDK는 CloudFormation을 프로그래밍 언어 수준으로 추상화하는 라이브러리이고 스택은 곧 AWS의 리소스(EC2 인스턴스, S3 버킷 등)를 의미한다. 여기서 클라우드 포메이션이란 인프라 관리를 간소화시키기 위한 것으로 각 리소스를 정의할 수 있는 템플릿을 통해 인프라를 보다 편리하게 관리하는 것을 도와주는 서비스다.</p>\n<p>공식 예제에 나온대로 특정 경로에 람다 함수를 정의한다.</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// lambda/hello.js\nexports.handler = async (event) =&gt; {\n  return {\n    statusCode: 200,\n    headers: { &quot;Content-Type&quot;: &quot;text/plain&quot; },\n    body: JSON.stringify({ message: &quot;Hello, World!&quot; }),\n  };\n};</code>\n        </deckgo-highlight-code>\n<p>그리고 스택 파일에서 람다 리소스를 정의한다. <code>cdk.Stack</code> 클래스를 상속받아 만들어진 스택 클래스는 변환된 CloudFormation 템플릿 상에서 독립적인 배포 단위를 의미한다고 한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// lib/cdk-hello-world-stack\nimport * as cdk from &#39;aws-cdk-lib&#39;;\nimport { Construct } from &#39;constructs&#39;;\n// Import Lambda L2 construct\nimport * as lambda from &#39;aws-cdk-lib/aws-lambda&#39;;\n\nexport class CdkHelloWorldStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // Define the Lambda function resource\n    const helloWorldFunction = new lambda.Function(this, &#39;HelloWorldFunction&#39;, {\n      runtime: lambda.Runtime.NODEJS_20_X, // Choose any supported Node.js runtime\n      code: lambda.Code.fromAsset(&#39;lambda&#39;), // Points to the lambda directory\n      handler: &#39;hello.handler&#39;, // Points to the &#39;hello&#39; file in the lambda directory\n    });\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>API 클라이언트를 통해 GET 요청을 보내면 람다 함수의 결과를 받을 수 있도록 API Gateway도 정의한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">import * as cdk from &quot;aws-cdk-lib&quot;;\nimport { Construct } from &quot;constructs&quot;;\n// Import Lambda L2 construct\nimport * as lambda from &quot;aws-cdk-lib/aws-lambda&quot;;\n//Import API Gateway L2 construct\nimport * as apigateway from &quot;aws-cdk-lib/aws-apigateway&quot;;\n\nexport class CdkHelloWorldStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // Define the Lambda function resource\n    const helloWorldFunction = new lambda.Function(this, &quot;HelloWorldFunction&quot;, {\n      runtime: lambda.Runtime.NODEJS_20_X, // Choose any supported Node.js runtime\n      code: lambda.Code.fromAsset(&quot;lambda&quot;), // Points to the lambda directory\n      handler: &quot;hello.handler&quot;, // Points to the &#39;hello&#39; file in the lambda directory\n    });\n\n    // Define the API Gateway resource\n    const api = new apigateway.LambdaRestApi(this, &quot;HelloWorldApi&quot;, {\n      handler: helloWorldFunction,\n      proxy: false,\n    });\n\n    // Define the &#39;/hello&#39; resource with a GET method\n    const helloResource = api.root.addResource(&quot;hello&quot;);\n    helloResource.addMethod(&quot;GET&quot;);\n  }\n}</code>\n        </deckgo-highlight-code>\n<h1 id=\"빌드\" style=\"position:relative;\">빌드<a href=\"#%EB%B9%8C%EB%93%9C\" aria-label=\"빌드 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>타입스크립된 파일을 먼저 컴파일한다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">npm run build</code>\n        </deckgo-highlight-code>\n<p>그리고 자바스크립트 코드를 템플릿으로 변환(synthesize)한다. <code>/cdk.out</code> 경로에서 여러 형식의 템플릿을 확인할 수 있다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">cdk synth</code>\n        </deckgo-highlight-code>\n<p>템플릿을 확인해보니 <code>region</code>이 이상하게 찍히는 현상이 있어서, <code>~/.aws/config</code> 파일에서 아래의 설정을 추가했다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">[default]\nregion=us-east-1</code>\n        </deckgo-highlight-code>\n<h1 id=\"배포-준비\" style=\"position:relative;\">배포 준비<a href=\"#%EB%B0%B0%ED%8F%AC-%EC%A4%80%EB%B9%84\" aria-label=\"배포 준비 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>배포를 하기 위해서는 사전에 부트스트랩이라는 초기 세팅 과정과 자격 증명이 필요하다.</p>\n<h2 id=\"iam-권한-추가\" style=\"position:relative;\">IAM 권한 추가<a href=\"#iam-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80\" aria-label=\"iam 권한 추가 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>먼저, AWS IAM 콘솔에서 사용자를 추가하고 AdministratorAccess 권한을 추가한다.</p>\n<p>[사진 추가]</p>\n<h2 id=\"cli-사용자-인증\" style=\"position:relative;\">CLI 사용자 인증<a href=\"#cli-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D\" aria-label=\"cli 사용자 인증 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>사용자 메뉴에서 액세스 키도 생성한다. 사용 사례는 CLI로 선택했다. 그리고 아래 커맨드로 AccessKeyID와 SecretAccessKey를 등록한다. 만약 등록이 잘 되었다면, 아래 CLI 명령어를 입력했을 때 현재 CLI에 연결된 정보가 출력된다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">aws sts get-caller-identity\n\n# {\n#    &quot;UserId&quot;: &quot;ABCDEFG&quot;,\n#    &quot;Account&quot;: &quot;1234&quot;,\n#    &quot;Arn&quot;: &quot;arn:aws:iam::1234:user/user1&quot;\n# }</code>\n        </deckgo-highlight-code>\n<h2 id=\"cdk-환경변수-셋업\" style=\"position:relative;\">CDK 환경변수 셋업<a href=\"#cdk-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%85%8B%EC%97%85\" aria-label=\"cdk 환경변수 셋업 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>CDK 환경변수 설정을 위해 프로젝트 루트에 <code>.env</code> 파일을 추가하고 <code>dotenv</code>를 설치했다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">CDK_DEFAULT_ACCOUNT=1234 # 콘솔의 계정 ID와 동일, get-caller-identity의 Account와 동일\nCDK_DEFAULT_REGION=us-east-1</code>\n        </deckgo-highlight-code>\n<p>엔트리 파일에 환경 변수를 로드한다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// bin/cdk-hello-world.ts\n#!/usr/bin/env node\nimport &quot;source-map-support/register&quot;;\nimport * as cdk from &quot;aws-cdk-lib&quot;;\nimport { CdkHelloWorldStack } from &quot;../lib/cdk-hello-world-stack&quot;;\nimport * as dotenv from &quot;dotenv&quot;;\n\ndotenv.config();\n\nconst app = new cdk.App();\n\nnew CdkHelloWorldStack(app, &quot;CdkHelloWorldStack&quot;, {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_DEFAULT_REGION,\n  },\n});</code>\n        </deckgo-highlight-code>\n<h2 id=\"부트스트랩\" style=\"position:relative;\">부트스트랩<a href=\"#%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9\" aria-label=\"부트스트랩 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>부트스트랩은 CDK가AWS 계정에 스택을 배포하기 전에 필요한 초기 세팅을 자동으로 생성하는 과정이다. 같은 계정/리전 조합으로 처음 한번만 하면된다. 권한이 잘 설정되었다면, 여러 출력과 함께 아래 메세지를 확인할 수 있다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">cdk bootstrap\n\n# ✅ Environment aws://123213123123/us-east-1 bootstrapped</code>\n        </deckgo-highlight-code>\n<h1 id=\"배포\" style=\"position:relative;\">배포<a href=\"#%EB%B0%B0%ED%8F%AC\" aria-label=\"배포 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>배포하면 끝</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">cdk deploy\n\n✨  Synthesis time: 2.69s\n\nHelloCdkStack:  start: Building unique-identifier:current_account-current_region\nHelloCdkStack:  success: Built unique-identifier:current_account-current_region\nHelloCdkStack:  start: Publishing unique-identifier:current_account-current_region\nHelloCdkStack:  success: Published unique-identifier:current_account-current_region\nThis deployment will make potentially sensitive changes according to your current security approval level (--require-approval broadening).\nPlease confirm you intend to make the following modifications:\n\nIAM Statement Changes\n┌───┬───────────────────────────────────────┬────────┬──────────────────────────┬──────────────────────────────┬───────────┐\n│   │ Resource                              │ Effect │ Action                   │ Principal                    │ Condition │\n├───┼───────────────────────────────────────┼────────┼──────────────────────────┼──────────────────────────────┼───────────┤\n│ + │ ${HelloWorldFunction.Arn}             │ Allow  │ lambda:InvokeFunctionUrl │ *                            │           │\n├───┼───────────────────────────────────────┼────────┼──────────────────────────┼──────────────────────────────┼───────────┤\n│ + │ ${HelloWorldFunction/ServiceRole.Arn} │ Allow  │ sts:AssumeRole           │ Service:lambda.amazonaws.com │           │\n└───┴───────────────────────────────────────┴────────┴──────────────────────────┴──────────────────────────────┴───────────┘\nIAM Policy Changes\n┌───┬───────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│   │ Resource                          │ Managed Policy ARN                                                             │\n├───┼───────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ + │ ${HelloWorldFunction/ServiceRole} │ arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole │\n└───┴───────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)\n\nDo you wish to deploy these changes (y/n)? y</code>\n        </deckgo-highlight-code>\n<p><code>curl</code>을 날려보면 잘 배포된 것을 확인할 수 있다.</p>\n<deckgo-highlight-code language=\"bash\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">curl https://&lt;api-id&gt;.lambda-url.&lt;Region&gt;.on.aws/\n&quot;Hello World!&quot;%</code>\n        </deckgo-highlight-code>\n<h1 id=\"참고\" style=\"position:relative;\">참고<a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/cdk/v2/guide/hello_world.html\">Tutorial: Create your first AWS CDK app</a> 외 연결 문서</li>\n</ul>","excerpt":"사전 준비 AWS 계정이 있어야 한다. 로컬에 Node.js, npm, AWS CLI가 설치되어 있어야 한다. CDK 설치 프로젝트 생성 타입스크립트를 비롯해서 여러 템플릿을 제공한다. 타입스크립트를 선택했다. CDK 애플리케이션 생성 /bin 폴더…","timeToRead":4,"headings":[{"id":"사전-준비","value":"사전 준비","depth":1},{"id":"cdk-설치","value":"CDK 설치","depth":1},{"id":"프로젝트-생성","value":"프로젝트 생성","depth":1},{"id":"cdk-애플리케이션-생성","value":"CDK 애플리케이션 생성","depth":1},{"id":"스택-생성","value":"스택 생성","depth":1},{"id":"빌드","value":"빌드","depth":1},{"id":"배포-준비","value":"배포 준비","depth":1},{"id":"iam-권한-추가","value":"IAM 권한 추가","depth":2},{"id":"cli-사용자-인증","value":"CLI 사용자 인증","depth":2},{"id":"cdk-환경변수-셋업","value":"CDK 환경변수 셋업","depth":2},{"id":"부트스트랩","value":"부트스트랩","depth":2},{"id":"배포","value":"배포","depth":1},{"id":"참고","value":"참고","depth":1}],"frontmatter":{"created":"2024-12-10 02:05:23 +0900","updated":"2024-12-10 03:14:35 +0900"},"fields":{"slug":"/AWS/CDK_프로젝트_만들기","title":"CDK 프로젝트 만들기"}}},"pageContext":{"slug":"/AWS/CDK_프로젝트_만들기","title":"CDK 프로젝트 만들기"}},"staticQueryHashes":["2328167765","3156452557"],"slicesMap":{}}