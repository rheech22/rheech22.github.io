{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/Dart/팩토리_생성자/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"dart-factory-constructor\" style=\"position:relative;\">Dart Factory Constructor<a href=\"#dart-factory-constructor\" aria-label=\"dart factory constructor permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<h2 id=\"정의\" style=\"position:relative;\">정의<a href=\"#%EC%A0%95%EC%9D%98\" aria-label=\"정의 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>객체 인스턴스를 생성할 때 유연성을 제공하는 특별한 생성자</li>\n<li>항상 새로운 인스턴스를 반환하지 않으며, 기존 인스턴스를 반환하거나 특정 로직을 통해 생성 가능</li>\n</ul>\n<h2 id=\"예시\" style=\"position:relative;\">예시<a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"1-인스턴스-재사용-및-캐싱\" style=\"position:relative;\">1. 인스턴스 재사용 및 캐싱<a href=\"#1-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EB%B0%8F-%EC%BA%90%EC%8B%B1\" aria-label=\"1 인스턴스 재사용 및 캐싱 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">class Logger {\n  static final Map&lt;String, Logger&gt; _cache = {};\n\n  final String name;\n\n  factory Logger(String name) {\n    if (_cache.containsKey(name)) {\n      return _cache[name]!;\n    } else {\n      final logger = Logger._internal(name);\n      _cache[name] = logger;\n      return logger;\n    }\n  }\n\n  Logger._internal(this.name);\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"2-싱글톤-패턴\" style=\"position:relative;\">2. 싱글톤 패턴<a href=\"#2-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4\" aria-label=\"2 싱글톤 패턴 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">class LazySingleton {\n  static LazySingleton? _instance;\n\n  factory LazySingleton() {\n    _instance ??= LazySingleton._internal();\n    return _instance!;\n  }\n\n  LazySingleton._internal();\n}\n\nvoid main() {\n  var s1 = LazySingleton();\n  var s2 = LazySingleton();\n  print(identical(s1, s2)); // true\n}</code>\n        </deckgo-highlight-code>\n<p>다만 초기화 로직이 필요없고 단순 불변 객체가 필요한 경우라면 Constant Constructor가 더 유용할 것 같음</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">class ImmutableSingleton {\n  static const ImmutableSingleton _instance = ImmutableSingleton._internal();\n\n  const ImmutableSingleton._internal();\n\n  factory ImmutableSingleton() {\n    return _instance;\n  }\n\n  final String name = &quot;ImmutableSingleton&quot;;\n}\n\nvoid main() {\n  var s1 = ImmutableSingleton();\n  var s2 = ImmutableSingleton();\n  print(identical(s1, s2)); // true\n  print(s1.name); // ImmutableSingleton\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"3-복잡한-로직-처리\" style=\"position:relative;\">3. 복잡한 로직 처리<a href=\"#3-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A1%9C%EC%A7%81-%EC%B2%98%EB%A6%AC\" aria-label=\"3 복잡한 로직 처리 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">class Database {\n  final String connectionString;\n\n  Database._internal(this.connectionString);\n\n  static Future&lt;Database&gt; create(String config) async {\n    // 복잡한 초기화 로직, 예: 비동기 연결 설정\n    await Future.delayed(Duration(seconds: 2));\n    return Database._internal(&quot;Connected with $config&quot;);\n  }\n\n  factory Database(String config) =&gt; throw UnimplementedError(&quot;Use Database.create instead&quot;);\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"4-서브클래스-인스턴스-반환\" style=\"position:relative;\">4. 서브클래스 인스턴스 반환<a href=\"#4-%EC%84%9C%EB%B8%8C%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B0%98%ED%99%98\" aria-label=\"4 서브클래스 인스턴스 반환 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// enum ShapeType\nenum ShapeType { circle, rectangle }\n\n// abstract class Shape\nabstract class Shape {\n  // factory constructor\n  factory Shape(ShapeType type) {\n    switch (type) {\n      case ShapeType.circle:\n        return Circle();\n      case ShapeType.rectangle:\n        return Rectangle();\n      default:\n        throw &#39;Invalid shape type&#39;;\n    }\n  }\n  // method\n  void draw();\n}\n\nclass Circle implements Shape {\n  // implement draw method\n  @override\n  void draw() {\n    print(&#39;Drawing circle&#39;);\n  }\n}\n\nclass Rectangle implements Shape {\n  // implement draw method\n  @override\n  void draw() {\n    print(&#39;Drawing rectangle&#39;);\n  }\n}\n\nvoid main() {\n  // create Shape object\n  Shape shape = Shape(ShapeType.circle);\n  Shape shape2 = Shape(ShapeType.rectangle);\n  shape.draw();\n  shape2.draw();\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"출처\" style=\"position:relative;\">출처<a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://dart-tutorial.com/object-oriented-programming/factory-constructor-in-dart/\">LEARN DART</a></li>\n</ul>","excerpt":"Dart Factory Constructor 정의 객체 인스턴스를 생성할 때 유연성을 제공하는 특별한 생성자 항상 새로운 인스턴스를 반환하지 않으며, 기존 인스턴스를 반환하거나 특정 로직을 통해 생성 가능 예시 1. 인스턴스 재사용 및 캐싱 2. 싱…","timeToRead":1,"headings":[{"id":"dart-factory-constructor","value":"Dart Factory Constructor","depth":1},{"id":"정의","value":"정의","depth":2},{"id":"예시","value":"예시","depth":2},{"id":"1-인스턴스-재사용-및-캐싱","value":"1. 인스턴스 재사용 및 캐싱","depth":3},{"id":"2-싱글톤-패턴","value":"2. 싱글톤 패턴","depth":3},{"id":"3-복잡한-로직-처리","value":"3. 복잡한 로직 처리","depth":3},{"id":"4-서브클래스-인스턴스-반환","value":"4. 서브클래스 인스턴스 반환","depth":3},{"id":"출처","value":"출처","depth":2}],"frontmatter":{"created":"2024-12-31 19:24:08 +0900","updated":"2024-12-31 20:08:38 +0900"},"fields":{"slug":"/Dart/팩토리_생성자","title":"팩토리 생성자"}}},"pageContext":{"slug":"/Dart/팩토리_생성자","title":"팩토리 생성자"}},"staticQueryHashes":["2328167765","3156452557"],"slicesMap":{}}