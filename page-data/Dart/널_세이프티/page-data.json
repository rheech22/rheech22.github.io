{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/Dart/널_세이프티/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"dart-null-safety\" style=\"position:relative;\">Dart Null Safety<a href=\"#dart-null-safety\" aria-label=\"dart null safety permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>Dart의 <strong>Null Safety</strong>는 변수나 객체가 <code>null</code>을 참조할 수 있는지 여부를 타입 시스템에서 구분하여, 런타임에서 발생하는 NullPointerException 등을 사전에 방지하기 위한 기능이다. Dart 2.12 이상 버전에서 지원하며, 컴파일 시점에 <code>null</code> 관련 오류를 미리 검출한다.</p>\n<h2 id=\"주요-특징\" style=\"position:relative;\">주요 특징<a href=\"#%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"주요 특징 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"non-nullable-타입\" style=\"position:relative;\">Non-nullable 타입<a href=\"#non-nullable-%ED%83%80%EC%9E%85\" aria-label=\"non nullable 타입 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>예: <code>int</code>, <code>String</code>, <code>List&#x3C;int></code> 등</li>\n<li><code>null</code> 값을 허용하지 않는 타입</li>\n<li>컴파일러가 해당 변수가 절대 <code>null</code>이 아님을 보장</li>\n</ul>\n<h3 id=\"nullable-타입\" style=\"position:relative;\">Nullable 타입<a href=\"#nullable-%ED%83%80%EC%9E%85\" aria-label=\"nullable 타입 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>예: <code>int?</code>, <code>String?</code>, <code>List&#x3C;int>?</code> 등</li>\n<li><code>null</code>을 포함할 수 있는 타입</li>\n<li>사용 시 <code>null</code> 여부 확인 또는 <code>?.</code>, <code>??</code> 등 null-safe 연산자가 필요</li>\n</ul>\n<h3 id=\"late-키워드\" style=\"position:relative;\"><code>late</code> 키워드<a href=\"#late-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"late 키워드 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>초기화 전에 접근하면 <code>LateInitializationError</code>가 발생</li>\n<li>변수를 선언한 뒤, 나중에 반드시 초기화할 것을 보장하는 키워드</li>\n</ul>\n<h3 id=\"흐름-분석flow-analysis\" style=\"position:relative;\">흐름 분석(Flow Analysis)<a href=\"#%ED%9D%90%EB%A6%84-%EB%B6%84%EC%84%9Dflow-analysis\" aria-label=\"흐름 분석flow analysis permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>코드 흐름을 정적으로 분석해 변수의 <code>null</code> 상태를 추적</li>\n<li>예를 들어, <code>if (variable != null)</code> 블록 내부에서는 <code>variable</code>이 이미 non-null 임</li>\n</ul>\n<h3 id=\"예시-코드\" style=\"position:relative;\">예시 코드<a href=\"#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C\" aria-label=\"예시 코드 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">void main() {\n  String? name;        // null이 될 수 있는 String 타입\n  name = &#39;Dart&#39;;       // 값 대입\n\n  // null 가능성이 있으므로 직접 .length 접근 시 오류 발생\n  // print(name.length); // 컴파일 에러\n\n  // null 체크 후 사용\n  if (name != null) {\n    print(name.length); // non-null로 안전하게 접근\n  }\n\n  // null-safe 연산자 사용\n  print(name?.length);  // name이 null이면 null, 아니면 length 반환\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"late-키워드-1\" style=\"position:relative;\"><code>late</code> 키워드<a href=\"#late-%ED%82%A4%EC%9B%8C%EB%93%9C-1\" aria-label=\"late 키워드 1 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>late</code> 키워드는 변수를 선언할 때 즉시 초기화하지 않고, <strong>필요할 때(처음 접근 시)에 초기화</strong>하거나, <strong>개발자가 특정 시점에 직접 초기화</strong>하겠다는 의도를 컴파일러에게 명시적으로 알리는 기능이다. <code>late</code>를 사용하면 변수 선언 시점을 유연하게 조정할 수 있고, 초기화 전에 접근할 경우 오류를 통해 잘못된 사용을 조기에 발견할 수 있다.</p>\n<h3 id=\"1-기본-원리\" style=\"position:relative;\">1. 기본 원리<a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EB%A6%AC\" aria-label=\"1 기본 원리 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code>late</code>로 선언된 변수는 메모리에 즉시 값을 할당하지 않는다.</li>\n<li>해당 변수에 접근하기 전까지 초기화를 미루거나, 특정 시점에 개발자가 직접 값을 할당할 수 있다.</li>\n<li>초기화되지 않은 <code>late</code> 변수에 접근하면 <code>LateInitializationError</code>가 발생한다.</li>\n</ul>\n<h3 id=\"2-사용-목적\" style=\"position:relative;\">2. 사용 목적<a href=\"#2-%EC%82%AC%EC%9A%A9-%EB%AA%A9%EC%A0%81\" aria-label=\"2 사용 목적 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>값의 계산(또는 객체 생성)이 무겁거나, 외부 리소스(예: 파일, 네트워크) 접근이 필요한 경우, 미리 값을 준비해둘 필요가 없을 때 사용한다.</p>\n<h3 id=\"3-기본-예시\" style=\"position:relative;\">3. 기본 예시<a href=\"#3-%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%8B%9C\" aria-label=\"3 기본 예시 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// 일반 변수 선언과 달리 값 없이 선언 가능\nlate String description;\n\nvoid main() {\n  // 사용 전까지 초기화하지 않아도 됨\n  // print(description); // 초기화 전 접근 시 LateInitializationError 발생\n\n  // 필요한 시점에 직접 할당\n  description = &#39;지연 초기화된 문자열&#39;;\n  print(description); // 정상적으로 출력: &quot;지연 초기화된 문자열&quot;\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"4-late-final과-함께-사용하기\" style=\"position:relative;\">4. late final과 함께 사용하기<a href=\"#4-late-final%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"4 late final과 함께 사용하기 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>late와 final을 함께 사용하면, 한 번만 값을 할당할 수 있고 이후 변경이 불가능해진다.\n이를 통해 지연 초기화와 불변성(immutable)을 동시에 확보할 수 있다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">late final int expensiveValue;\n\nvoid main() {\n  // 사용 시점에 초기화\n  expensiveValue = calculateExpensiveOperation();\n  print(expensiveValue); // 이후 이 값은 변경할 수 없음\n}\n\n// 무거운 연산(예: 대규모 계산, 파일 읽기 등)을 모사\nint calculateExpensiveOperation() {\n  print(&#39;비용이 큰 연산 실행&#39;);\n  return 42;\n}\n</code>\n        </deckgo-highlight-code>\n<p>late final 변수는 초기화 후 재할당이 불가하므로, 초기에 한 번만 값이 설정되면 이후에 값을 변경하려고 하면 컴파일 에러가 발생한다.</p>\n<h3 id=\"5-lazy-초기화\" style=\"position:relative;\">5. Lazy 초기화<a href=\"#5-lazy-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"5 lazy 초기화 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>heavyComputation 함수는 description 변수가 사용될 때 호출된다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// Person class\nclass Person {\n  final int age;\n  final String name;\n  late String description = heavyComputation();\n\n// constructor\n  Person(this.age, this.name) {\n    print(&quot;Constructor is called&quot;);\n  }\n// method\n  String heavyComputation() {\n    print(&quot;heavyComputation is called&quot;);\n    return &quot;Heavy Computation&quot;;\n  }\n}\n\nvoid main() {\n  // object of Person class\n  Person person = Person(10, &quot;John&quot;);\n  print(person.name);\n  print(person.description);\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"6-주의사항-및-권장사항\" style=\"position:relative;\">6. 주의사항 및 권장사항<a href=\"#6-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-%EB%B0%8F-%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD\" aria-label=\"6 주의사항 및 권장사항 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>\n<p>초기화를 반드시 보장해야 하는 경우</p>\n<ul>\n<li>late 변수는 선언만 하고 초기화하지 않으면, 접근 시 에러가 발생한다.</li>\n<li>따라서, 프로그램 흐름상 반드시 할당이 일어날 수 있도록 설계해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>late의 남용은 삼간다</p>\n<ul>\n<li>모든 변수를 late로 선언하면, 가독성이 떨어지고 런타임 에러 리스크가 커질 수 있다.</li>\n<li>초기화 시점이 분명하고, 정말로 지연 초기화가 필요한 경우에만 사용한다.</li>\n</ul>\n</li>\n<li>\n<p>late보다 Nullable 타입(?)이 더 적합한 경우</p>\n<ul>\n<li>만약 변수가 ‘할당 전까지 null일 수도 있다’는 로직이라면 late 대신 String?처럼 Nullable 타입을 쓰는 것이 낫다.</li>\n<li>late는 “초기화 전에는 절대 접근해선 안 된다”는 의미이며, “null을 가능하게 둔다”와는 목적이 다르다.</li>\n</ul>\n</li>\n<li>\n<p>debugLate</p>\n<ul>\n<li>Dart 2.17부터는 --enable-asserts나 디버그 모드에서 late 변수를 디버그하기 위해 late 대신 debugLate를 사용할 수 있다.</li>\n<li>이는 디버깅 시점에서만 유용하며, 배포용으로 사용되진 않는다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"type-promotion\" style=\"position:relative;\">Type Promotion<a href=\"#type-promotion\" aria-label=\"type promotion permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Dart의 <strong>Type Promotion</strong>은 조건문 등을 통해 변수의 타입이 보다 구체적으로 추론될 때, 해당 블록 내부에서 컴파일러가 변수의 타입을 자동으로 좁혀주는 기능이다.</p>\n<h3 id=\"1-주요-특징\" style=\"position:relative;\">1. 주요 특징<a href=\"#1-%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"1 주요 특징 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>\n<p><strong>조건문 기반</strong></p>\n<ul>\n<li><code>if (variable != null)</code> 또는 <code>is</code> 체크 등을 거치면, 블록 내부에서 <code>variable</code>이 non-null 혹은 특정 타입임을 보장받는다.</li>\n</ul>\n</li>\n<li>\n<p><strong>자동 타입 변환</strong></p>\n<ul>\n<li>명시적인 캐스팅 없이도, 컴파일러가 안전하다고 판단하면 변수를 더 구체적인 타입으로 간주한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>정적 분석 활용</strong></p>\n<ul>\n<li>흐름 분석(Flow Analysis)을 통해, 조건문 바깥에서는 원래 타입으로 복귀하고, 조건문 안에서는 프로모션된 타입을 사용한다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-간단-예시\" style=\"position:relative;\">2. 간단 예시<a href=\"#2-%EA%B0%84%EB%8B%A8-%EC%98%88%EC%8B%9C\" aria-label=\"2 간단 예시 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">void printLength(String? text) {\n  if (text != null) {\n    // 여기서는 text가 non-null임이 보장되므로 String으로 자동 프로모션\n    print(text.length);\n  }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">void main(){\n  Object name = &quot;Pratik&quot;;\n  // print(name.length) will not work because Dart doesn&#39;t know that name is a String\n\n  if(name is String) {\n  // name promoted from Object to String\n    print(&quot;The length of name is ${name.length}&quot;);\n  }\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// method to print the length of the text\nvoid printLength(String? text){\n    if(text == null) {\n        throw Exception(&quot;The text is null&quot;);\n    }\n    print(&quot;Length of text is ${text.length}&quot;);\n}\n// main method\nvoid main() {\n    printLength(&quot;Hello&quot;);\n}</code>\n        </deckgo-highlight-code>\n<h3 id=\"3-주의사항\" style=\"position:relative;\">3. 주의사항<a href=\"#3-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"3 주의사항 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>조건문이 변수에 미치는 영향을 컴파일러가 확실히 추론할 수 있어야 한다.</li>\n<li>변수가 스코프 내에서 달라질 수 있다면 타입 프로모션은 적용되지 않는다.</li>\n</ul>\n<p>가령 아래 코드와 같이 myMethod 함수 내에서 value에 재할당하지 않고 if 조건에서 stringorNull을 바로 체크한다면, 컴파일러는 stringorNull.length르 호출할 때 새로 null이 반환될 수 있다고 가정하고 타입 프로모션을 적용하지 않는다.</p>\n<deckgo-highlight-code language=\"dart\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// Try to solve the error using type promotion\nimport &#39;dart:math&#39;;\nclass DataProvider{\n    String? get stringorNull =&gt; Random().nextBool() ? &quot;Hello&quot; : null;\n\n    void myMethod(){\n        String? value = stringorNull;\n        if(value is String){\n            print(&quot;The length of value is ${value.length}&quot;);\n        }else{\n            print(&quot;The value is not string.&quot;);\n        }\n\n    }\n}\n\nvoid main() {\n    DataProvider().myMethod();\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"출처\" style=\"position:relative;\">출처<a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"header-anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://dart-tutorial.com/null-safety/\">LEARN DART</a></li>\n</ul>","excerpt":"Dart Null Safety Dart의 Null Safety는 변수나 객체가 null을 참조할 수 있는지 여부를 타입 시스템에서 구분하여, 런타임에서 발생하는 NullPointerException 등을 사전에 방지하기 위한 기능이다. Dart 2.…","timeToRead":3,"headings":[{"id":"dart-null-safety","value":"Dart Null Safety","depth":1},{"id":"주요-특징","value":"주요 특징","depth":2},{"id":"non-nullable-타입","value":"Non-nullable 타입","depth":3},{"id":"nullable-타입","value":"Nullable 타입","depth":3},{"id":"late-키워드","value":"late 키워드","depth":3},{"id":"흐름-분석flow-analysis","value":"흐름 분석(Flow Analysis)","depth":3},{"id":"예시-코드","value":"예시 코드","depth":3},{"id":"late-키워드-1","value":"late 키워드","depth":2},{"id":"1-기본-원리","value":"1. 기본 원리","depth":3},{"id":"2-사용-목적","value":"2. 사용 목적","depth":3},{"id":"3-기본-예시","value":"3. 기본 예시","depth":3},{"id":"4-late-final과-함께-사용하기","value":"4. late final과 함께 사용하기","depth":3},{"id":"5-lazy-초기화","value":"5. Lazy 초기화","depth":3},{"id":"6-주의사항-및-권장사항","value":"6. 주의사항 및 권장사항","depth":3},{"id":"type-promotion","value":"Type Promotion","depth":2},{"id":"1-주요-특징","value":"1. 주요 특징","depth":3},{"id":"2-간단-예시","value":"2. 간단 예시","depth":3},{"id":"3-주의사항","value":"3. 주의사항","depth":3},{"id":"출처","value":"출처","depth":2}],"frontmatter":{"created":"2024-12-31 05:47:15 +0900","updated":"2024-12-31 20:09:12 +0900"},"fields":{"slug":"/Dart/널_세이프티","title":"널 세이프티"}}},"pageContext":{"slug":"/Dart/널_세이프티","title":"널 세이프티"}},"staticQueryHashes":["2328167765","3156452557"],"slicesMap":{}}