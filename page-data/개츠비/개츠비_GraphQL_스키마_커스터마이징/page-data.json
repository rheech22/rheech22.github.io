{"componentChunkName":"component---src-templates-wiki-template-tsx","path":"/개츠비/개츠비_GraphQL_스키마_커스터마이징/","result":{"data":{"markdownRemark":{"html":"<p>GraphQL Typegen을 사용하면 내가 사용하는 쿼리에 따라 타입을 자동으로 생성해주기 때문에 매우 편리하다. 다만 대부분을 nullable한 필드로 정의하기 때문에 수많은 분기문과 옵셔널 체이닝이 필요하다.</p>\n<p>이런 경우에 GraphQL 스키마를 커스터마이징하면 좋다. gatsby-node 파일에서 createSchemaCustomization API를 사용하면 된다. 나는 frontmatter의 created, updated 필드와 fields의 slug, title 필드를 필수 값으로 사용하고 있다.</p>\n<deckgo-highlight-code language=\"ts\" terminal=\"carbon\" theme=\"one-dark\"  >\n          <code slot=\"code\">// ./gatsby-node.ts\n\nexports.createSchemaCustomization = ({ actions }: CreateSchemaCustomizationArgs) =&gt; {\n  const { createTypes } = actions;\n\n  const typeDefs = `\n    type templateQuery {\n      markdownRemark: MarkdownRemark!\n    }\n\n    type MarkdownRemark implements Node {\n      frontmatter: Frontmatter!\n      fields: MarkdownRemarkFields!\n    }\n\n    type Frontmatter {\n      created: String!\n      updated: String!\n    }\n\n    type MarkdownRemarkFields {\n      slug: String!\n      title: String!\n    }\n  `;\n\n  createTypes(typeDefs);\n};\n</code>\n        </deckgo-highlight-code>","excerpt":"GraphQL Typegen을 사용하면 내가 사용하는 쿼리에 따라 타입을 자동으로 생성해주기 때문에 매우 편리하다. 다만 대부분을 nullable한 필드로 정의하기 때문에 수많은 분기문과 옵셔널 체이닝이 필요하다. 이런 경우에 GraphQL 스키마를…","timeToRead":1,"headings":[],"frontmatter":{"created":"2023-08-27 13:10:49 +0900","updated":"2023-08-27 13:18:42 +0900"},"fields":{"slug":"/개츠비/개츠비_GraphQL_스키마_커스터마이징","title":"개츠비 GraphQL 스키마 커스터마이징"}}},"pageContext":{"slug":"/개츠비/개츠비_GraphQL_스키마_커스터마이징","title":"개츠비 GraphQL 스키마 커스터마이징"}},"staticQueryHashes":["2328167765","3156452557"],"slicesMap":{}}